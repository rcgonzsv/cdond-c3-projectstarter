#Created by Rafael Castro Gonzalez
version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environment
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            curl -H "Content-Type: text/plain" -H "token: c763c115-49d9-47a8-897a-33315f7bdc6b" --request PUT --data "" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: c763c115-49d9-47a8-897a-33315f7bdc6b" --request PUT --data "" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID}
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: c763c115-49d9-47a8-897a-33315f7bdc6b" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Frontend Code
          command: |
            cd frontend
            npm i
            npm run build
    
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Backend Code
          command: |
            cd backend
            npm i
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Frontend Code
          command: |
            cd frontend
            npm i
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Backend Code
          command: |
            cd backend
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit Frontend Dependencies
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit Backend Dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: deploy backend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: deploy frontend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add Backend EC2 Instance IP to inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Add env file
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT=${ENVIRONMENT}" >> backend/.env
      - run:
          name: Configure server with ansible
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt main.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Run DB Migration
          command: |
            cd backend 
            npm install
            npm run migrations
      - run:
          name: Log to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: c763c115-49d9-47a8-897a-33315f7bdc6b" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: | 
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"
      - run:
          name: "Baking backend API_URL into the front-end"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build      
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment
      - revert-migration
        
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: c763c115-49d9-47a8-897a-33315f7bdc6b" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Build and deploy backend
          command: |
            cd backend
            npm i
            npm run build
            tar -C dist -czvf backend_artifact.tar.gz .
            mkdir -p ../.circleci/ansible/roles/deploy/files
            mv backend_artifact.tar.gz ../.circleci/ansible/roles/deploy/files/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-main.yml
      - destroy-environment
      - revert-migration
      
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update bash
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 --region us-west-2 describe-instances \
                  --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            echo ${BACKEND_IP}
            API_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${API_URL}
            curl ${API_URL}
      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com/#/employee"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migration
  
  
  cloudfront-update:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Old Workflow Id: "$OldWorkflowID"
            echo "$STACKS[*]"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople 
      - run:
          name: Clean up old resources
          command: |
            if echo "$STACKS[*]" | grep -Eq "$OldWorkflowID" 
            then
              echo "${OldWorkflowID}"
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migration

            
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [run-migrations]

version: 2.1

commands:
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run: 
          name: Install << parameters.end >> dependencies
          command: |
            cd << parameters.end >>
            npm i
  destroy-environment:
    description: Destroy the entire infrastructure
    steps:
      - run:
          name: Delete all files from the current S3 bucket
          command: |
            set TERM=xterm               
            if aws s3api head-bucket --bucket udas3-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udas3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  create-env-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env var t env file
          command: |
            echo "NODE_ENV=development" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

  revert-migration:
    description: Revert the last migration if smoke tests are failing in the current workflow
    steps:
      - run:
          when: on_fail
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs
      - checkout
      - create-env-file
      - run:
          when: on_fail
          name: Load migration status from https://memstash.io/ and revert migrations if necessary
          command: |
            DBMIGRATION_FLAG=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_completion)
            echo ${DBMIGRATION_FLAG}
            if [[ ${DBMIGRATION_FLAG} == 1 ]]
            then
              cd backend
              npm install
              npm run migrations:revert
            fi


orbs:
  aws-cli: circleci/aws-cli@1.3.0
  python: circleci/python@1.0.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Build Frontend Code
          command: |
            cd frontend
            npm i
            npm run build
    
  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Build Backend Code
          command: |
            cd backend
            npm i
            npm run build

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Test Backend
          command: |
            cd backend
              mkdir -p ./reports/junit/
              npm install --save-dev jest-junit jest-junit-reporter
              ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/

  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"  
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Get OldWorkflowID and save it to https://memstash.io/
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo ${OldWorkflowID}  
            if [ -n "$OldWorkflowID" ]
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data ${OldWorkflowID}  https://api.memstash.io/values/old_workflowID
            else 
            echo "No old infrastructure exists for UdaPeople"
            fi            
      - run:
          name: deploy backend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}'
      - run:
          name: deploy frontend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}'
      - run:
          name: Add Backend EC2 Instance IP to inventory and save to memstash
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/backend_ip            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  run-migration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - create-env-file     
      - run:
          name: Run migrations and save status to https://memstash.io/
          command: |
            pwd
            cd backend
            npm install
            npm run migrations > migrations.txt            
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}"  --request PUT \
              --data $( grep -c "No migrations are pending" migrations.txt ) \
              https://api.memstash.io/values/migration_completion
            cat migrations.txt
            pwd 
      - destroy-environment

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache tar
            apk add --no-cache gzip
            apk add --no-cache ansible
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}
      - run:
          name: "Baking backend API_URL into the front-end"            
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build      
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            pwd
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |          
            aws s3 cp ./frontend/dist s3://udas3-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive  
            pwd                      
      - revert-migration
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pwd
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
            pwd
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
            pwd
      - create-env-file
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            tar -czvf ../../backend.tar.gz ../../backend
            ansible-playbook -i inventory.txt deploy-main.yml
            pwd
      - revert-migration
      - destroy-environment

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - create-env-file   
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            EC2_URL="http://${BACKEND_IP}:3030/api/status"
            if curl -s ${EC2_URL} | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Smoke test frontend
          command: |
            pwd
            APP_URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employee"
            if curl -s ${APP_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - revert-migration
      - destroy-environment

  deploy-cloudfront:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Update cloudfront distribution
          command: |
            set TERM=xterm
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            export STACK_LIST=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE DELETE_FAILED --no-paginate --output text)
            echo Old Workflow Id: "${OldWorkflowID}"
            echo Stack List: "${STACK_LIST}"
            if [ -n "${OldWorkflowID}" ]
            then
            echo "Update existing CloudFront stack"
            aws cloudformation update-stack  \
              --stack-name udapeople-cloudfront \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}'
            else              
            echo "Create CloudFront stack"
            aws cloudformation create-stack  \
              --stack-name udapeople-cloudfront \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}'            
            fi
            if [ -n "${OldWorkflowID}" ]
            then
              echo "Empty old S3 bucket and delete old frontend stack"
              aws s3 rm s3://udapeople-frontend-${OldWorkflowID}/ --recursive
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
              echo "Delete old backend stack"              
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
            fi 
      - revert-migration
      - destroy-environment

  cleanup-old-resources:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: apk add aws-cli
      - run: apk add tar
      - run:
          name: Clean up old resources
          command: |
            if echo "$STACKS[*]" | grep -Eq "$OldWorkflowID" 
            then
              echo "${OldWorkflowID}"
              aws s3 rm "s3://udas3-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi 
workflows:
  UdaPeople:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
          #requires: [build-frontend]
      #- test-backend:
          #requires: [build-backend]
      #- scan-frontend:
          #requires: [test-frontend]
      #- scan-backend:
          #requires: [test-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only:
                - master
      - run-migration:
          requires: [deploy-infrastructure]
      - deploy-backend:    
          requires: [run-migration]
      - deploy-frontend:
          requires: [deploy-backend]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup-old-resources:
          requires: [cloudfront-update]
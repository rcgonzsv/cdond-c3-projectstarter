version: 2.1

commands:
  npm-install:
    parameters:
      end:
        type: string
    steps:
      - run: 
          name: Install << parameters.end >> dependencies
          command: |
            cd << parameters.end >>
            npm i
  destroy-environment:
    steps:
      - run:
          name: Destroy backend
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - run:
          name: Destroy frontend
          command: |
            aws s3 rm s3://udas3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  revert-migrations:
    steps:
      - run:
          name: install backend dependencies
          command: |
            cd backend
            npm i
          when: on_fail
      - run:
          name: Revert database migration if it has already ran
          command: |
            if curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request GET https://api.memstash.io/values/migrations | grep "true"
            then 
              cd backend
              npm run migrations:revert
            else 
              echo "no revert migration needed"
            fi
          when: on_fail


orbs:
  aws-cli: circleci/aws-cli@1.3.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Build Frontend Code
          command: |
            cd frontend
            npm i
            npm run build
    
  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Build Backend Code
          command: |
            cd backend
            npm i
            npm run build

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Test Frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Test Backend
          command: |
            cd backend
              mkdir -p ./reports/junit/
              npm install --save-dev jest-junit jest-junit-reporter
              ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/

  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "frontend"
      - run:
          name: Audit Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"  
      - run:
          name: Audit Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: mkdir /tmp/saveme
      - run: yum -y install tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}'

      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: | 
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[0].PublicDnsName" \
              --output text) > /tmp/saveme/backend_url.txt       
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "${PUBLIC_DNS}" https://api.memstash.io/values/public_dns
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/saveme/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - old_s3arn.txt                          
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}' 


  configure-infrastructure:
    docker:
    - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - attach_workspace:
          at: /tmp/saveme          
      - run:
          name: Install Ansible
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add --update bash
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Set up inventory file
          command: |
            echo "[backend]" > .circleci/ansible/inventory.txt
            cat /tmp/saveme/backend_url.txt >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Run playbook
          command: |
            ls -l /tmp/saveme
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-main.yml
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - backend_url.txt            

  run-migrations:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - npm-install:
          end: "backend"
      - run:
          name: Run DB Migration
          command: |
            cd backend && npm install
            npm run migrations
      - run:
          name: Log to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT --data "true" https://api.memstash.io/values/migrations
            
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: /tmp/saveme
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_URL=$(cat /tmp/saveme/backend_url.txt)
            echo BACKEND_URL: ${BACKEND_URL}
            export API_URL=http://${BACKEND_URL}:3030
            echo "API_URL=$API_URL" >> frontend/.env 
            cd frontend            
            npm run build
      - run:
          name: "Deploy frontend objects"
          command: |
            sudo npm install webpack-dev-server -g
            cd frontend
            sudo npm i
            sudo npm run build    
      - run:
          name: Compress build files
          command: |
            cd frontend/dist
            tar -zcvf /tmp/saveme/frontend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/saveme
          paths:
            - frontend.tar.gz 
      - run:
            name: Extract frontend build
            command: |
              echo `ls /tmp/saveme`
              mkdir ~/frontend
              cp /tmp/saveme/frontend.tar.gz ~/frontend
              cd ~/frontend
              tar -zxvf frontend.tar.gz
              echo `ls -la`
      - run:
            name: deploy to s3 bucket
            command: |
              cd ~/frontend
              aws s3 sync . s3://udas3-${CIRCLE_WORKFLOW_ID:0:7}                       
      - destroy-environment
      - revert-migrations
        
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            export PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request GET https://api.memstash.io/values/public_dns)
            echo "$PUBLIC_DNS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Build and deploy backend
          command: |
            cd backend
            npm i
            npm run build
            tar -C dist -czvf backend_artifact.tar.gz .
            mkdir -p ../.circleci/ansible/roles/deploy/files
            mv backend_artifact.tar.gz ../.circleci/ansible/roles/deploy/files/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-main.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
            at: /tmp/saveme
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            apk add --update nodejs npm
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke test on backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0b:f0:04:ba:01:e9:18:d0:78:b4:48:93:6d:fc:9a:22"]
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Old Workflow Id: "$OldWorkflowID"
            echo "$STACKS[*]"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags 'Key=project,Value=udapeople-${CIRCLE_WORKFLOW_ID:0:7}' 

  cleanup-old-resources:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: apk add aws-cli
      - run: apk add tar
      - run:
          name: Clean up old resources
          command: |
            if echo "$STACKS[*]" | grep -Eq "$OldWorkflowID" 
            then
              echo "${OldWorkflowID}"
              aws s3 rm "s3://udas3-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi 
workflows:
  UdaPeople:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
          #requires: [build-frontend]
      #- test-backend:
          #requires: [build-backend]
      #- scan-frontend:
          #requires: [test-frontend]
      #- scan-backend:
          #requires: [test-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:    
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup-old-resources:
          requires: [cloudfront-update]
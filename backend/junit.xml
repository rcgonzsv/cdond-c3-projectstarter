<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="79" failures="0" errors="0" time="44.195">
  <testsuite name="Employee Controller" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:31" time="6.906" tests="14">
    <testcase classname="Employee Controller When an employee is posted to the controller Should dispatch create employee command" name="Employee Controller When an employee is posted to the controller Should dispatch create employee command" time="0.005">
    </testcase>
    <testcase classname="Employee Controller when an employee name UPDATE is sent to the controller should dispatch change employee name command" name="Employee Controller when an employee name UPDATE is sent to the controller should dispatch change employee name command" time="0">
    </testcase>
    <testcase classname="Employee Controller when an employee address UPDATE is sent to the controller should dispatch update employee address command" name="Employee Controller when an employee address UPDATE is sent to the controller should dispatch update employee address command" time="0.001">
    </testcase>
    <testcase classname="Employee Controller when an employee display name UPDATE is sent to the controller should dispatch update employee display name command" name="Employee Controller when an employee display name UPDATE is sent to the controller should dispatch update employee display name command" time="0">
    </testcase>
    <testcase classname="Employee Controller when an employee tags UPDATE is sent to the controller should dispatch update tags employee command" name="Employee Controller when an employee tags UPDATE is sent to the controller should dispatch update tags employee command" time="0.001">
    </testcase>
    <testcase classname="Employee Controller when an employee phone number UPDATE is sent to the controller should dispatch update phone number employee command" name="Employee Controller when an employee phone number UPDATE is sent to the controller should dispatch update phone number employee command" time="0">
    </testcase>
    <testcase classname="Employee Controller when an employee personal emaill UPDATE is sent to the controller should dispatch update personal email employee command" name="Employee Controller when an employee personal emaill UPDATE is sent to the controller should dispatch update personal email employee command" time="0.001">
    </testcase>
    <testcase classname="Employee Controller when an employee company email UPDATE is sent to the controller should dispatch update employee company email command" name="Employee Controller when an employee company email UPDATE is sent to the controller should dispatch update employee company email command" time="0">
    </testcase>
    <testcase classname="Employee Controller when an employee salary UPDATE is sent to the controller should dispatch update employee salary command" name="Employee Controller when an employee salary UPDATE is sent to the controller should dispatch update employee salary command" time="0.001">
    </testcase>
    <testcase classname="Employee Controller when an employee salary type UPDATE is sent to the controller should dispatch update employee salary type command" name="Employee Controller when an employee salary type UPDATE is sent to the controller should dispatch update employee salary type command" time="0">
    </testcase>
    <testcase classname="Employee Controller when an employee effective date UPDATE is sent to the controller should dispatch update employee effective date command" name="Employee Controller when an employee effective date UPDATE is sent to the controller should dispatch update employee effective date command" time="0.001">
    </testcase>
    <testcase classname="Employee Controller when an employee UPDATE birthdate is sent to the controller should dispatch update employee birthdate command" name="Employee Controller when an employee UPDATE birthdate is sent to the controller should dispatch update employee birthdate command" time="0">
    </testcase>
    <testcase classname="Employee Controller when a UPDATE request is sent to the controller should disptach deactivateEmployee employee command" name="Employee Controller when a UPDATE request is sent to the controller should disptach deactivateEmployee employee command" time="0">
    </testcase>
    <testcase classname="Employee Controller when a UPDATE request is sent to the controller should disptach activateEmployee employee command" name="Employee Controller when a UPDATE request is sent to the controller should disptach activateEmployee employee command" time="0">
    </testcase>
  </testsuite>
  <testsuite name="BaseRepository" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:38" time="0.802" tests="8">
    <testcase classname="BaseRepository When creating an entity should save de entity in db" name="BaseRepository When creating an entity should save de entity in db" time="0.001">
    </testcase>
    <testcase classname="BaseRepository When creating an entity should dispatch events from entity" name="BaseRepository When creating an entity should dispatch events from entity" time="0.001">
    </testcase>
    <testcase classname="BaseRepository When getting an entity by id should return first by id" name="BaseRepository When getting an entity by id should return first by id" time="0">
    </testcase>
    <testcase classname="BaseRepository when adding a where clauses should add fields to the query result" name="BaseRepository when adding a where clauses should add fields to the query result" time="0.001">
    </testcase>
    <testcase classname="BaseRepository when adding a where clauses should return all where in a single object" name="BaseRepository when adding a where clauses should return all where in a single object" time="0">
    </testcase>
    <testcase classname="BaseRepository when adding a where clauses should return entity when doing a first" name="BaseRepository when adding a where clauses should return entity when doing a first" time="0.001">
    </testcase>
    <testcase classname="BaseRepository when adding a where clauses should call find when gettting query result" name="BaseRepository when adding a where clauses should call find when gettting query result" time="0">
    </testcase>
    <testcase classname="BaseRepository when adding a where clauses should return pagination when paginating" name="BaseRepository when adding a where clauses should return pagination when paginating" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AggregateRoot" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:39" time="0.705" tests="6">
    <testcase classname="AggregateRoot When applying an event should add the event to the raised events" name="AggregateRoot When applying an event should add the event to the raised events" time="0.001">
    </testcase>
    <testcase classname="AggregateRoot When applying an event should call event handler on entity by the event like `on{NameOfTheEvent}`" name="AggregateRoot When applying an event should call event handler on entity by the event like `on{NameOfTheEvent}`" time="0">
    </testcase>
    <testcase classname="AggregateRoot when loading events from history should update the new values from history " name="AggregateRoot when loading events from history should update the new values from history " time="0">
    </testcase>
    <testcase classname="AggregateRoot when loading events from history should not add the events to the raised events" name="AggregateRoot when loading events from history should not add the events to the raised events" time="0">
    </testcase>
    <testcase classname="AggregateRoot when publishing the events should get all raised events" name="AggregateRoot when publishing the events should get all raised events" time="0.001">
    </testcase>
    <testcase classname="AggregateRoot when publishing the events it should clean the event stream" name="AggregateRoot when publishing the events it should clean the event stream" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Employee Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:40" time="0.708" tests="1">
    <testcase classname="Employee Updater when an user updates an employee should get and employee and add it to the repository" name="Employee Updater when an user updates an employee should get and employee and add it to the repository" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Employee Creator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:40" time="0.644" tests="1">
    <testcase classname="Employee Creator when an user creates and employee should add an employee to the repo" name="Employee Creator when an user creates and employee should add an employee to the repo" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Create Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:41" time="0.616" tests="1">
    <testcase classname="Create Employee Validator When sending a complete save employee command should pass the validation if the command is correct" name="Create Employee Validator When sending a complete save employee command should pass the validation if the command is correct" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Composite Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:42" time="0.571" tests="2">
    <testcase classname="Composite Validator When validating with multiple validators should aggregate errors of the validators" name="Composite Validator When validating with multiple validators should aggregate errors of the validators" time="0.002">
    </testcase>
    <testcase classname="Composite Validator When validating with multiple validators should return no error if any result is error occur" name="Composite Validator When validating with multiple validators should return no error if any result is error occur" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Order Controller" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:42" time="0.963" tests="1">
    <testcase classname="Order Controller When order request goes in to the controller should call save order command" name="Order Controller When order request goes in to the controller should call save order command" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:43" time="0.651" tests="1">
    <testcase classname="Check if employee exists when dispatching an update address employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update address employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:44" time="0.635" tests="1">
    <testcase classname="Check if employee exists when dispatching an update name employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update name employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:45" time="0.63" tests="1">
    <testcase classname="Check if employee exists when dispatching an update personal email employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update personal email employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:45" time="0.638" tests="1">
    <testcase classname="Check if employee exists when dispatching an update effective date employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update effective date employee command should validate that the product exists in the db" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:46" time="0.654" tests="1">
    <testcase classname="Check if employee exists when dispatching an update company email employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update company email employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:47" time="0.949" tests="1">
    <testcase classname="Check if employee exists when dispatching an update display name employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update display name employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:48" time="0.696" tests="1">
    <testcase classname="Check if employee exists when dispatching an update phone number employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update phone number employee command should validate that the product exists in the db" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:48" time="0.766" tests="1">
    <testcase classname="Check if employee exists when dispatching an update salary type employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update salary type employee command should validate that the product exists in the db" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:49" time="0.756" tests="1">
    <testcase classname="Check if employee exists when dispatching an update birthdate employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update birthdate employee command should validate that the product exists in the db" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:50" time="0.659" tests="1">
    <testcase classname="Check if employee exists when dispatching an update employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Address Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:50" time="0.658" tests="1">
    <testcase classname="Employee Address Updater when an user updates an employee address should get and employee and add it to the repository" name="Employee Address Updater when an user updates an employee address should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:51" time="0.629" tests="1">
    <testcase classname="Check if employee exists when dispatching an update salary employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update salary employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:52" time="0.978" tests="1">
    <testcase classname="Check if employee exists when dispatching an update employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update employee command should validate that the product exists in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Check if employee exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:53" time="0.816" tests="1">
    <testcase classname="Check if employee exists when dispatching an update tags employee command should validate that the product exists in the db" name="Check if employee exists when dispatching an update tags employee command should validate that the product exists in the db" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Employee Name Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:54" time="1.187" tests="1">
    <testcase classname="Employee Name Updater when an user updates an employee name should get and employee and add it to the repository" name="Employee Name Updater when an user updates an employee name should get and employee and add it to the repository" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Employee Personal Email Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:55" time="0.702" tests="1">
    <testcase classname="Employee Personal Email Updater when an user updates an employee personal email should get and employee and add it to the repository" name="Employee Personal Email Updater when an user updates an employee personal email should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Effective Date Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:56" time="0.691" tests="1">
    <testcase classname="Employee Effective Date Updater when an user updates an employee effective date should get and employee and add it to the repository" name="Employee Effective Date Updater when an user updates an employee effective date should get and employee and add it to the repository" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Employee Company Email Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:56" time="0.635" tests="1">
    <testcase classname="Employee Company Email Updater when an user updates an employee company email should get and employee and add it to the repository" name="Employee Company Email Updater when an user updates an employee company email should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Order Creator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:57" time="0.893" tests="1">
    <testcase classname="Order Creator when an user creates an order should add order to the repo" name="Order Creator when an user creates an order should add order to the repo" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Employee Display Name Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:58" time="0.636" tests="1">
    <testcase classname="Employee Display Name Updater when an user updates an employee display name  should get and employee and add it to the repository" name="Employee Display Name Updater when an user updates an employee display name  should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Phone Number Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:58" time="0.629" tests="1">
    <testcase classname="Employee Phone Number Updater when an user updates an employee phone number should get and employee and add it to the repository" name="Employee Phone Number Updater when an user updates an employee phone number should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Remover" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:38:59" time="0.991" tests="1">
    <testcase classname="Employee Remover when a user activates an employee should activate the employee from the repository" name="Employee Remover when a user activates an employee should activate the employee from the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Salary Type Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:00" time="0.641" tests="1">
    <testcase classname="Employee Salary Type Updater when an user updates an employee salary type should get and employee and add it to the repository" name="Employee Salary Type Updater when an user updates an employee salary type should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Birthdate Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:01" time="0.641" tests="1">
    <testcase classname="Employee Birthdate Updater when an user updates an employee birthdate should get and employee and add it to the repository" name="Employee Birthdate Updater when an user updates an employee birthdate should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Remover" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:01" time="0.614" tests="1">
    <testcase classname="Employee Remover when a user removes an employee should remove the employee from the repository" name="Employee Remover when a user removes an employee should remove the employee from the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Salary Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:02" time="0.626" tests="1">
    <testcase classname="Employee Salary Updater when an user updates an employee salary should get and employee and add it to the repository" name="Employee Salary Updater when an user updates an employee salary should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Employee Tags Updater" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:03" time="0.638" tests="1">
    <testcase classname="Employee Tags Updater when an user updates an employee tags should get and employee and add it to the repository" name="Employee Tags Updater when an user updates an employee tags should get and employee and add it to the repository" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Create Order Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:03" time="0.531" tests="2">
    <testcase classname="Create Order Validator When sending a in complete save order command should return an error if the productId is null" name="Create Order Validator When sending a in complete save order command should return an error if the productId is null" time="0.003">
    </testcase>
    <testcase classname="Create Order Validator When sending a in complete save order command should pass the validation if the command is correct" name="Create Order Validator When sending a in complete save order command should pass the validation if the command is correct" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Check if product exists" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:04" time="0.65" tests="1">
    <testcase classname="Check if product exists when dispatching a create order program it should validate that a the product exist in the db" name="Check if product exists when dispatching a create order program it should validate that a the product exist in the db" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:05" time="0.632" tests="1">
    <testcase classname="Update Employee Validator when sending an update address employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update address employee command should pass the validation if the command is correct" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:05" time="0.536" tests="1">
    <testcase classname="Update Employee Validator when sending an update name mployee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update name mployee command should pass the validation if the command is correct" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Status Controller" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:06" time="0.681" tests="1">
    <testcase classname="Status Controller should return ok status" name="Status Controller should return ok status" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:06" time="0.544" tests="1">
    <testcase classname="Update Employee Validator when sending an update personal email employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update personal email employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:07" time="0.544" tests="1">
    <testcase classname="Update Employee Validator when sending an update effective date employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update effective date employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:07" time="0.53" tests="1">
    <testcase classname="Update Employee Validator when sending an update company email employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update company email employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:08" time="0.532" tests="1">
    <testcase classname="Update Employee Validator when sending an update display name employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update display name employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:09" time="0.692" tests="1">
    <testcase classname="Update Employee Validator when sending an update phone number employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update phone number employee command should pass the validation if the command is correct" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:09" time="0.552" tests="1">
    <testcase classname="Update Employee Validator when sending an update birthdate employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update birthdate employee command should pass the validation if the command is correct" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:10" time="0.525" tests="1">
    <testcase classname="Update Employee Validator when sending an update salary type employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update salary type employee command should pass the validation if the command is correct" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:10" time="0.525" tests="1">
    <testcase classname="Update Employee Validator when sending an update salary employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update salary employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Update Employee Validator" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:11" time="0.534" tests="1">
    <testcase classname="Update Employee Validator when sending an update employee command should pass the validation if the command is correct" name="Update Employee Validator when sending an update employee command should pass the validation if the command is correct" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Order" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:11" time="0.554" tests="2">
    <testcase classname="Order When adding a product should add the product to the products collection" name="Order When adding a product should add the product to the products collection" time="0.001">
    </testcase>
    <testcase classname="Order When adding a product should apply ProductAddedToOrderEvent" name="Order When adding a product should apply ProductAddedToOrderEvent" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Current User" errors="0" failures="0" skipped="0" timestamp="2020-10-06T23:39:12" time="0.533" tests="1">
    <testcase classname="Current User When getting the logged user should return the user logged in the request" name="Current User When getting the logged user should return the user logged in the request" time="0">
    </testcase>
  </testsuite>
</testsuites>